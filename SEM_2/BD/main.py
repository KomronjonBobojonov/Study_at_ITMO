import os
import sqlite3 as sql

import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
from aiogram.utils.markdown import link

TOKEN = "6632707680:AAHgALop6GPnllgFruIzRQV2JZZ6P_FLsIg"
DB_FILENAME = "users.db"
GROUP_ID = -1002074269915
ADMIN_IDS = {820393036}
admin_mode = False

logging.basicConfig(level=logging.INFO)

class Database:
    def __init__(self):
        if os.path.exists(DB_FILENAME) and not os.path.isfile(DB_FILENAME):
            exit(print(f"{DB_FILENAME} exists as a directory"))
        self.conn = sql.connect(DB_FILENAME)
        self.cur = self.conn.cursor()
        self.cur.execute("CREATE TABLE IF NOT EXISTS user(user_id INTEGER, UNIQUE(user_id))")

    def add_user(self, user_id):
        self.cur.execute("INSERT OR IGNORE INTO user (user_id) VALUES (?)", (user_id,))
        self.conn.commit()
    
    def get_all_user_ids(self):
        return self.cur.execute("SELECT user_id from user").fetchall()

    def __del__(self):
        self.conn.close()


bot = Bot(token=TOKEN)

dp = Dispatcher()
db = Database()

replies = {"hello": "–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–∞—è!\n–ú—ã —Ä–∞–¥—ã, —á—Ç–æ —Ç—ã –≤—ã–±—Ä–∞–ª–∞ –∏–º–µ–Ω–Ω–æ –Ω–∞—Å.‚ù§Ô∏è\n"
                    "–í –æ—Ç–≤–µ—Ç –∫–æ–º–∞–Ω–¥–∞ Shady –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∞ –¥–ª—è —Ç–µ–±—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥–∞—Ä–∫–æ–≤!\n\n"
                    "–ü–æ–¥—Å–∫–∞–∂–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç—Ä–æ–∏–ª–æ –ª–∏ —Ç–µ–±—è –∫–∞—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞? (–æ—Ç–≤–µ—Ç –±–æ—Ç–æ–º –¥–∞, –Ω–µ—Ç)",
            "feedback:da": "–ú—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã, —á—Ç–æ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –ª–µ–≥–≥–∏–Ω—Å—ã –Ω–∞—à–µ–≥–æ –±—Ä–µ–Ω–¥–∞!\n"
                           "–ü–æ–∑–≤–æ–ª—å –ø–æ–¥–∞—Ä–∏—Ç—å —Ç–µ–±–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∞—Å—Å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –æ—Ç –∏—Å–∫—Ä–µ–Ω–Ω–µ–≥–æ —Å–µ—Ä–¥—Ü–∞‚ù§Ô∏è",
            "feedback:net": "–ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ —Ç–∞–∫ –ø–æ–ª—É—á–∏–ª–æ—Å—å.\n"
                            "–ù–∞–ø–∏—à–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è –≤ —Å–∏—Ç—É–∞—Ü–∏–∏\n"
                            "\n(–ê–∫–∫–∞—É–Ω—Ç –í–µ–Ω–µ—Ä–∫–∏ –≤ —Ç–≥.)\n\n"
                            "–í –∫–∞—á–µ—Å—Ç–≤–µ –∏–∑–≤–∏–Ω–µ–Ω–∏–π, –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è —Ç–µ–±—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥–∞—Ä–∫–æ–≤,"
                            "–Ω–∞–¥–µ–µ–º—Å—è –æ–Ω–∏ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤—è—Ç—Å—è.",
            "bonus:workouts": "–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ —Å–∫–æ—Ä–æ –æ–Ω –æ—Ç–∫—Ä–æ–µ—Ç—Å—è, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —ç—Ç–æ –ø—Ä–æ–µ–∑–æ–π–¥—ë—Ç –º—ã –¥–∞–¥–∏–º —Ç–µ–±–µ –∑–Ω–∞—Ç—åü§ó",
            "bonus:gifts": "–ü–æ —Å—Å—ã–ª–∫–µ —Ç–µ–±—è –∂–¥—ë—Ç –ø–æ–¥–∞—Ä–æ–∫‚ú®‚ú®‚ú® https://flocktory.com/interchange/2258b525-c0ab-44e8-983d-419b49c62640/?utm_medium=referral&utm_source=yoomoney.ru&utm_campaign=exchange)",
            "bonus:instruction": "–î–æ—Ä–æ–≥–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å–Ω–∏—Ü—ã, –º—ã —É–ª—É—á—à–∞–µ–º –Ω–∞—à–µ –∏–∑–¥–µ–ª–∏–µ –∏ –∫–∞–∂–¥—ã–π –æ—Ç–∑—ã–≤ –≤–∞–∂–µ–Ω –¥–ª—è –Ω–∞—Å! –ß—Ç–æ–±—ã –ª–µ–≥–≥–∏–Ω—Å—ã SHADY –ø—Ä–æ—Å–ª—É–∂–∏–ª–∏ –≤–∞–º –¥–æ–ª—å—à–µ –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è –≤–∞—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ç–æ–≤–∞—Ä–æ–º: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ—Ä–µ–∂–Ω—ã–π —Ä–µ–∂–∏–º —Å—Ç–∏—Ä–∫–∏. –ù–µ —Å—Ç–æ–∏—Ç —Å—Ç–∏—Ä–∞—Ç—å –∏–∑–¥–µ–ª–∏–µ –ø—Ä–∏ –≤—ã—Å–æ–∫–∏—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞—Ö –∏ –Ω–∞ –±–æ–ª—å—à–∏—Ö –æ–±–æ—Ä–æ—Ç–∞—Ö –æ—Ç–∂–∏–º–∞ –¥–∞–±—ã –Ω–µ –ø–æ–≤—Ä–µ–¥–∏—Ç—å —Ç–∫–∞–Ω—å. 2. –°–æ–≤–µ—Ç—É–µ–º —Å—É—à–∏—Ç—å –Ω–∞ –ø–ª–æ—Å–∫–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏. –¢–∫–∞–Ω—å –ª–µ–≥–≥–∏–Ω—Å –º–æ–∂–µ—Ç –¥–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ —Ä–∞—Å—Ç—è–Ω—É—Ç—å—Å—è –æ—Ç —Å—É—à–∫–∏ –≤ —Å—Ç–∏—Ä–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ –∏–ª–∏ –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏. –ò–∑–±–µ–≥–∞–π—Ç–µ —Å—É—à–∫–∏ –ø–æ–¥ —Å–æ–ª–Ω–µ—á–Ω—ã–º–∏ –ª—É—á–∞–º–∏.3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç–∫—É –¥–ª—è –±–µ—Ä–µ–∂–Ω–æ–π —Å—Ç–∏—Ä–∫–∏. 4. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Ç–±–µ–ª–∏–≤–∞—Ç–µ–ª—è –∏ —Ö–∏–º—á–∏—Å—Ç–∫–∞.  –°–ª–µ–¥–æ–≤–∞–Ω–∏–µ —ç—Ç–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º –ø–æ–º–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à–∏ –ª–µ–≥–≥–∏–Ω—Å—ã –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –±—É–¥—É—Ç —Ä–∞–¥–æ–≤–∞—Ç—å –≤–∞—Å –¥–æ–ª–≥–æ–µ –≤—Ä–µ–º—è!",
            "spam_cancelled": "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
            "admin_mode_on": "–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω–∫—É. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",
            "spam_ask": "–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?",
            "spam_start": "–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞",
            "spam_finished": "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
}

@dp.callback_query(F.data.startswith("bonus:"))
async def send_random_value(callback: types.CallbackQuery):
    await callback.message.answer(replies[callback.data])


@dp.callback_query(F.data.startswith("feedback:"))
async def send_random_value(callback: types.CallbackQuery):
    buttons = [[types.InlineKeyboardButton(text="–ö–æ–º–ø–ª–µ–∫—Å –¥–æ–º–∞—à–Ω–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", callback_data="bonus:workouts")],
               [types.InlineKeyboardButton(text="–ü–æ–¥–∞—Ä–∫–∏ –æ—Ç –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤", callback_data="bonus:gifts")],
               [types.InlineKeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Ö–æ–¥—É", callback_data="bonus:instruction")]]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.answer(replies[callback.data], reply_markup=keyboard)

@dp.callback_query(F.data.startswith("spam:"))
async def send_random_value(callback: types.CallbackQuery):
    _, status, from_user, msg_id = callback.data.split(":")
    if status == "start":
        users = db.get_all_user_ids()
        for admin_id in ADMIN_IDS:
            try:
                users.remove((admin_id,))
            except Exception:
                pass
        await bot.send_message(from_user, replies["spam_start"])
        for i in range(len(users)):
            user = users[i][0]
            try:
                await bot.copy_message(user, from_user, msg_id)
            except Exception:
                pass
        await bot.send_message(from_user, replies["spam_finished"])
    else:
        await bot.send_message(from_user, replies["spam_cancelled"])

    global admin_mode
    admin_mode = False


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    db.add_user(message.from_user.id)
    buttons = [[types.InlineKeyboardButton(text="–î–∞", callback_data="feedback:da"),
                types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="feedback:net")]]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.forward(GROUP_ID)
    await message.answer(replies["hello"], reply_markup=keyboard)


@dp.message(Command("admin"))
async def cmd_start(message: types.Message):
    global admin_mode
    admin_mode = True
    await message.answer(replies["admin_mode_on"])


@dp.message()
async def text_msg_handler(message: types.Message):
    if admin_mode and message.from_user.id in ADMIN_IDS:
        buttons = [[types.InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É",
                                               callback_data=f"spam:start:{message.from_user.id}:{message.message_id}"),
                    types.InlineKeyboardButton(text="–ì–∞–ª—è, —É –Ω–∞—Å –æ—Ç–º–µ–Ω–∞",
                                               callback_data=f"spam:cancel:{message.from_user.id}:{message.message_id}")]]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer(replies["spam_ask"], reply_markup=keyboard)
    elif message.chat.type == "private":
        await message.forward(GROUP_ID)


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
